 count=0
    try:
        criteria=request.POST.getlist('criteria')
        if request.method == 'POST': 
            social_male_student=[]
            social_female_student=[]
            natural_male_student=[]
            natural_female_student=[]
            account=UserAccount.objects.all().values()
            for data in account:
                if data['Role_id']==3:
                    stud_id=data['User_id']
                    student=User.objects.get(id=stud_id)
                    b=[]
                    a1=student.Id_no
                    a2=student.FirstName
                    a3=student.LastName
                    a4=student.Gender
                    a5=student.Department
                    a6=student.collage
                    a7=student.stream
                    a8=student.Year_of_Student
                    # #error is here
                    b.append(a1)
                    b.append(a2)
                    b.append(a3)
                    b.append(a4)
                    b.append(a5)
                    b.append(a6)
                    b.append(a7)
                    b.append(a8)
                    #print(b)
                    if b[3]=="Male":
                        # male_student.append(b)
                        if a7=="social":
                            
                            social_male_student.append(b)
                        elif a7=="natural":
                            natural_male_student.append(b)
                    else:
                        if a7=="natural":
                            natural_female_student.append(b)
                        elif a7=="social":
                            social_female_student.append(b)
             
            
            if 'collage' in criteria:
                    if 'department' in criteria:
                        if 'batch' in criteria:
                            sorted_male_social_student=sorted(social_male_student,key=lambda x:(x[5],x[4],x[7],x[1],x[2]))
                            print("what if")
                            sorted_female_social_student=sorted(social_female_student,key=lambda x:(x[5],x[4],x[7],x[1],x[2]))
                            print("Printed")
                            sorted_male_natural_student=sorted(natural_male_student,key=lambda x:(x[5],x[4],x[7],x[1],x[2]))
                            sorted_female_natural_student=sorted(natural_female_student,key=lambda x:(x[5],x[4],x[7],x[1],x[2]))
                            print("We Gate")
                        else:
                            sorted_male_social_student=sorted(social_male_student,key=lambda x:(x[5],x[4],x[1],x[2]))
                            sorted_female_social_student=sorted(social_female_student,key=lambda x:(x[5],x[4],x[1],x[2]))
                            sorted_male_natural_student=sorted(natural_male_student,key=lambda x:(x[5],x[4],x[1],x[2]))
                            sorted_female_natural_student=sorted(natural_female_student,key=lambda x:(x[5],x[4],x[1],x[2]))
                    else:  
                        if 'batch' in criteria:
                            sorted_male_social_student=sorted(social_male_student,key=lambda x:(x[5],x[7],x[1],x[2]))
                            sorted_female_social_student=sorted(social_female_student,key=lambda x:(x[5],x[7],x[1],x[2]))
                            sorted_male_natural_student=sorted(natural_male_student,key=lambda x:(x[5],x[7],x[1],x[2]))
                            sorted_female_natural_student=sorted(natural_female_student,key=lambda x:(x[5],x[7],x[1],x[2]))
                        else:
                            sorted_male_social_student=sorted(social_male_student,key=lambda x:(x[5],x[1],x[2]))
                            sorted_female_social_student=sorted(social_female_student,key=lambda x:(x[5],x[1],x[2]))
                            sorted_male_natural_student=sorted(natural_male_student,key=lambda x:(x[5],x[1],x[2]))
                            sorted_female_natural_student=sorted(natural_female_student,key=lambda x:(x[5],x[1],x[2]))
            else:
                        
                        if 'department' in criteria:
                            
                            if 'batch' in criteria:
                                
                                sorted_male_social_student=sorted(social_male_student,key=lambda x:(x[4],x[7],x[1],x[2]))
                                sorted_female_social_student=sorted(social_female_student,key=lambda x:(x[4],x[7],x[1],x[2]))
                                sorted_male_natural_student=sorted(natural_male_student,key=lambda x:(x[4],x[7],x[1],x[2]))
                                sorted_female_natural_student=sorted(natural_female_student,key=lambda x:(x[4],x[7],x[1],x[2]))
                            else:
                                
                                sorted_male_social_student=sorted(social_male_student,key=lambda x:(x[4],x[1],x[2]))
                                sorted_female_social_student=sorted(social_female_student,key=lambda x:(x[4],x[1],x[2]))
                                sorted_male_natural_student=sorted(natural_male_student,key=lambda x:(x[4],x[1],x[2]))
                                sorted_female_natural_student=sorted(natural_female_student,key=lambda x:(x[4],x[1],x[2]))
                        else:
                            
                            if 'batch' in criteria:
                                sorted_male_social_student=sorted(social_male_student,key=lambda x:(x[7],x[1],x[2]))
                                sorted_female_social_student=sorted(social_female_student,key=lambda x:(x[7],x[1],x[2]))
                                sorted_male_natural_student=sorted(natural_male_student,key=lambda x:(x[7],x[1],x[2]))
                                sorted_female_natural_student=sorted(natural_female_student,key=lambda x:(x[7],x[1],x[2]))
                                
                            else:
                                sorted_male_social_student=sorted(social_male_student,key=lambda x:(x[1],x[2]))
                                sorted_female_social_student=sorted(social_female_student,key=lambda x:(x[1],x[2]))
                                sorted_male_natural_student=sorted(natural_male_student,key=lambda x:(x[1],x[2]))
                                sorted_female_natural_student=sorted(natural_female_student,key=lambda x:(x[1],x[2]))
            
            order=['Block','Dorm_name']
            dorm=Dorm.objects.all().order_by(*order).values()
            
            for dorm1 in dorm:
                
                bl=dorm1['Block_id']
                block=Block.objects.get(id=bl)
                if str(block.Block_purpose)=='Males Block'and dorm1['Status']=='Active':
                    #print(sorted_male_social_student)
                   
                    for socmale in sorted_male_social_student: 
                       
                        cnt=Placement.objects.filter(block=block, room=dorm1['Dorm_name']).count()
                        if int(cnt)<int(dorm1['Capacity']):
                            if Placement.objects.filter(Stud_id=socmale[0]).exists():
                                 pass
                            else:
                                #Stud_id,FirstName,LastName,gender,stream,collage,department,batch,block,room
                                place=Placement(Stud_id=socmale[0],FirstName=socmale[1],LastName=socmale[2],gender='Male',stream=socmale[6],collage=socmale[5],department=socmale[4] ,batch=socmale[7] ,block=block,room=dorm1['Dorm_name'])
                                place.save()
                                count=count+1
                                #print(place)
                        else:
                            break 
                    for natmale in sorted_male_natural_student:
                        cnt=Placement.objects.filter(block=block, room=dorm1['Dorm_name']).count()
                        if int(cnt)<int(dorm1['Capacity']):
                            if Placement.objects.filter(Stud_id=natmale[0]).exists():
                                pass
                            else:
                                x=8
                                place=Placement(Stud_id=natmale[0],FirstName=natmale[1],LastName=natmale[2],gender='Male',stream=natmale[6],collage=natmale[5],department=natmale[4],batch=natmale[7] ,block=block,room=dorm1['Dorm_name'])
                                place.save()
                                count=count+1
                                #print(place)
                        else:
                            break
                elif str(block.Block_purpose)=='Females Block'and dorm1['Status']=='Active':
                    # print(sorted_female_social_student)
                    for socfemale in sorted_female_social_student:
                        cnt=Placement.objects.filter(block=block, room=dorm1['Dorm_name']).count()
                        if int(cnt)<int(dorm1['Capacity']):
                            if Placement.objects.filter(Stud_id=socfemale[0]).exists():
                                pass
                            else:
                                place=Placement(Stud_id=socfemale[0],FirstName=socfemale[1],LastName=socfemale[2],gender='Female',stream=natmale[6],collage=socfemale[5],department=socfemale[4],batch=socfemale[7] ,block=block,room=dorm1['Dorm_name'])
                                place.save()
                                count=count+1
                        else:
                            break
                    for natfemale in sorted_female_natural_student:
                        cnt=Placement.objects.filter(block=block, room=dorm1['Dorm_name']).count()
                        if int(cnt)<int(dorm1['Capacity']):
                            if Placement.objects.filter(Stud_id=natfemale[0]).exists():
                                pass
                            else:
                                place=Placement(Stud_id=natfemale[0],FirstName=natfemale[1],LastName=natfemale[2],gender='Female',stream=natfemale[6],collage=natfemale[5],department=natfemale[4] ,batch=natfemale[7] ,block=block,room=dorm1['Dorm_name'])
                                place.save()
                                count=count+1
                        else:
                            break
            if count ==1:
                messages.success(request,'1 Sudent Placed successfully....!!!')    
            elif count==0:
                msg=' All Students Already Placed....!!!'
                messages.info(request,msg)
            else:
                msg=str(count) + ' Sudent Placed successfully....!!!'
                messages.success(request,msg)               
    except:
          messages.error(request,'Empty or Invalid File...!!')